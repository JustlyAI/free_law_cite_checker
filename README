# Legal Citation Checker

A Python-based tool for validating legal citations using the CourtListener API. This tool can be used standalone or integrated with Claude Code as a custom command for enhanced productivity.

## Features

- **Citation Validation**: Validates legal citations against CourtListener's comprehensive database
- **Batch Processing**: Process entire documents to find and validate multiple citations
- **Multiple Formats**: Supports `.md`, `.txt`, and `.markdown` files
- **Detailed Reports**: Generates JSON reports with citation status, case names, and metadata
- **Security**: Built-in path validation to prevent directory traversal attacks
- **Claude Code Integration**: Custom slash command for seamless AI-assisted workflows

## Table of Contents

- [Prerequisites](#prerequisites)
- [Installation](#installation)
- [Getting a CourtListener API Token](#getting-a-courtlistener-api-token)
- [Usage](#usage)
  - [Using the Python Script Directly](#using-the-python-script-directly)
  - [Using with Claude Code](#using-with-claude-code)
- [Output Format](#output-format)
- [Examples](#examples)
- [Configuration](#configuration)
- [Contributing](#contributing)
- [License](#license)

## Prerequisites

- Python 3.8 or higher
- CourtListener API token (free tier available)
- (Optional) Claude Code for enhanced workflow integration

## Installation

1. Clone the repository:
```bash
git clone https://github.com/yourusername/legal-citation-checker.git
cd legal-citation-checker
```

2. Install dependencies:
```bash
pip install requests python-dotenv
```

3. Set up your environment (see [Configuration](#configuration))

## Getting a CourtListener API Token

CourtListener provides free API access for non-commercial use:

1. **Create an Account**:
   - Visit [CourtListener.com](https://www.courtlistener.com)
   - Click "Sign In" ‚Üí "Create Account"
   - Complete the registration process

2. **Generate an API Token**:
   - Once logged in, click on your username in the top right
   - Select "Profile" from the dropdown
   - Scroll down to "API Token" section
   - Click "Generate Token" if you don't have one
   - Copy your token (keep it secure!)

3. **API Limits**:
   - Free tier: 5,000 requests per day
   - Rate limit: 10 requests per second
   - See [CourtListener API documentation](https://www.courtlistener.com/api/) for details

## Usage

### Using the Python Script Directly

1. **Set your API token** (choose one method):
   
   Environment variable:
   ```bash
   export COURTLISTENER_API_TOKEN="your-token-here"
   ```
   
   Or create a `.env` file:
   ```
   COURTLISTENER_API_TOKEN=your-token-here
   ```

2. **Run the script**:
   ```bash
   # Check citations in a file (output to console)
   python citecheck.py document.md
   
   # Save report to a specific directory
   python citecheck.py document.md /path/to/output/directory
   ```

### Using with Claude Code

1. **Install Claude Code** (if not already installed):
   ```bash
   npm install -g @anthropic/claude-code
   ```

2. **Set up the custom command**:
   
   Create the directory structure:
   ```bash
   mkdir -p .claude/commands
   ```
   
   Copy the command file:
   ```bash
   cp claude-commands/citecheck.md .claude/commands/
   ```

3. **Ensure the Python script is accessible**:
   
   The command expects the script at `src/run/citecheck.py`. Adjust the path in the command file if your structure is different.

4. **Use the command in Claude Code**:
   ```
   claude
   /citecheck my-legal-document.md
   ```

   Claude will:
   - Validate the file
   - Run the citation checker
   - Display formatted results with color coding
   - Save a detailed report

## Output Format

### Console Output (Direct Script Usage)

The script outputs a JSON report with the following structure:

```json
{
  "metadata": {
    "file": "/absolute/path/to/document.md",
    "checked_at": "2024-03-26T10:30:00.123456",
    "total_citations": 5,
    "summary": {
      "found": 3,
      "not_found": 1,
      "invalid": 0,
      "multiple_matches": 1
    }
  },
  "citations": [
    {
      "citation_text": "Brown v. Board of Education, 347 U.S. 483 (1954)",
      "normalized": ["347 U.S. 483"],
      "status": 200,
      "status_name": "FOUND",
      "valid": true,
      "position": {
        "start": 156,
        "end": 203
      },
      "case_info": {
        "case_name": "Brown v. Board of Education",
        "clusters": [...]
      }
    }
  ]
}
```

### Claude Code Output

When using the `/citecheck` command, you'll see:

```
üìä Citation Check Complete

Total citations found: 5
  ‚úÖ Valid & found: 3
  ‚ö†Ô∏è  Not in database: 1
  ‚ùå Invalid format: 0
  üîÑ Multiple matches: 1

Citation Details:
  ‚úì Brown v. Board of Education, 347 U.S. 483 (1954) - Brown v. Board of Education
  ‚úó Fake v. Citation, 999 U.S. 999 (2099) - NOT FOUND
  ‚ö†Ô∏è Smith v. Jones, 123 F.3d 456 (2020) - MULTIPLE MATCHES

üíæ Report saved to: data/outputs/citecheck_results/document_report_20240326_103000.json
```

## Examples

### Example 1: Simple Citation Check

Create a test file `test.md`:
```markdown
The landmark case Brown v. Board of Education, 347 U.S. 483 (1954) established...
See also Miranda v. Arizona, 384 U.S. 436 (1966) for related precedent.
```

Run:
```bash
python citecheck.py test.md
```

### Example 2: Checking a Legal Brief

```bash
# Direct usage
python citecheck.py legal-briefs/motion-to-dismiss.md reports/

# With Claude Code
claude
/citecheck legal-briefs/motion-to-dismiss.md
```

### Example 3: Batch Processing

Create a simple wrapper script:
```python
import os
from citecheck import check_citations

for filename in os.listdir('documents'):
    if filename.endswith(('.md', '.txt')):
        result = check_citations(f'documents/{filename}', 'reports')
        print(f"Processed {filename}: {result['success']}")
```

## Configuration

### Environment Variables

- `COURTLISTENER_API_TOKEN`: Your CourtListener API token (required)

### File Structure

Recommended project structure:
```
.
‚îú‚îÄ‚îÄ .claude/
‚îÇ   ‚îî‚îÄ‚îÄ commands/
‚îÇ       ‚îî‚îÄ‚îÄ citecheck.md
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îî‚îÄ‚îÄ run/
‚îÇ       ‚îî‚îÄ‚îÄ citecheck.py
‚îú‚îÄ‚îÄ data/
‚îÇ   ‚îî‚îÄ‚îÄ outputs/
‚îÇ       ‚îî‚îÄ‚îÄ citecheck_results/
‚îú‚îÄ‚îÄ .env
‚îú‚îÄ‚îÄ .gitignore
‚îî‚îÄ‚îÄ README.md
```

### Security Notes

- The script validates file paths to prevent directory traversal attacks
- Output directories are validated to prevent writing to system directories
- API tokens should never be committed to version control

## Error Messages

Common errors and solutions:

| Error | Solution |
|-------|----------|
| "API token required" | Set `COURTLISTENER_API_TOKEN` environment variable |
| "File not found" | Check file path and ensure file exists |
| "File must be .md, .txt, or .markdown" | Use a supported file format |
| "API rate limit exceeded" | Wait before making more requests or upgrade API plan |
| "Path traversal detected" | Use absolute paths or paths without `..` |

## Contributing

Contributions are welcome! Please:

1. Fork the repository
2. Create a feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

### Development Guidelines

- Maintain backward compatibility
- Add tests for new features
- Update documentation
- Follow PEP 8 style guidelines
- Ensure security best practices

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## Acknowledgments

- [CourtListener](https://www.courtlistener.com) for providing the comprehensive legal citation API
- [Free Law Project](https://free.law/) for maintaining open legal data
- The legal technology community for feedback and suggestions

## Support

- **Issues**: Please use the [GitHub issue tracker](https://github.com/yourusername/legal-citation-checker/issues)
- **Discussions**: Join our [discussions](https://github.com/yourusername/legal-citation-checker/discussions)
- **CourtListener API**: See their [documentation](https://www.courtlistener.com/api/rest/v4/) and [support](https://www.courtlistener.com/contact/)

---

Made with ‚öñÔ∏è by the legal tech community